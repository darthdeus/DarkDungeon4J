package cz.dd4j.agents.heroes;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import cz.dd4j.agents.IHeroAgent;
import cz.dd4j.domain.EFeature;
import cz.dd4j.domain.EItem;
import cz.dd4j.simulation.data.agents.actions.Action;
import cz.dd4j.simulation.data.agents.actions.EAction;
import cz.dd4j.simulation.data.dungeon.Dungeon;
import cz.dd4j.simulation.data.dungeon.elements.entities.Hero;
import cz.dd4j.simulation.data.dungeon.elements.items.Item;
import cz.dd4j.simulation.data.dungeon.elements.places.Corridor;
import cz.dd4j.simulation.data.dungeon.elements.places.Room;

/**
 * Semi-random-valid-action hero.
 * 
 * Chooses random action from the set of available random actions as generated by {@link HeroRandom#generateActions(Hero)}.
 * 
 * NEVER goes to the room, which contains danger.
 * 
 * @author Jimmy
 */
public class HeroSemiRandom implements IHeroAgent {

	private Random random;
	
	private Hero hero;
	
	public HeroSemiRandom() {
		random = new Random();
	}
	
	public HeroSemiRandom(long seed) {
		random = new Random(seed);
	}
	
	@Override
	public void observeBody(Hero hero, long timestampMillis) {
		this.hero = hero;
	}

	@Override
	public void observeDungeon(Dungeon dungeon, boolean full, long timestampMillis) {
	}

	@Override
	public Action act() {
		List<Action> actions = generateActions(hero);		
		return actions.get(random.nextInt(actions.size()));
	}
	
	private List<Action> generateActions(Hero hero) {
		List<Action> result = new ArrayList<Action>();
		
		// MOVE ACTIONS
		for (Corridor corridor : hero.atRoom.corridors) {
			Room otherRoom = corridor.getOtherRoom(hero.atRoom);
			if (otherRoom.monster != null && (hero.hand == null || hero.hand.type != EItem.SWORD)) continue;
			if (otherRoom.feature != null && otherRoom.feature.type == EFeature.TRAP && hero.hand != null) continue;
			result.add(new Action(EAction.MOVE, corridor.getOtherRoom(hero.atRoom)));
		}
		
		// ATTACK ACTIONS
		if (hero.atRoom.monster != null && hero.hand != null && hero.hand.type == EItem.SWORD) {
			result.add(new Action(EAction.ATTACK, hero.atRoom.monster));
		}
		
		// DISARM ACTIONS
		if (hero.hand == null && hero.atRoom.feature != null && hero.atRoom.feature.type == EFeature.TRAP) {
			result.add(new Action(EAction.DISARM, hero.atRoom.feature));
		}
		
		// EQUIP ACTIONS
		if (hero.inventory.values().size() > 0) {
			for (Item item : hero.inventory.values()) {
				result.add(new Action(EAction.EQUIP, null, item));
			}
		}
		
		// UNEQUIP
		if (hero.hand != null) {
			result.add(new Action(EAction.EQUIP, null));
		}		
		
		// PICKUP
		if (hero.atRoom.item != null) {
			result.add(new Action(EAction.PICKUP, hero.atRoom.item));
		}
		
		return result;
	}

}
